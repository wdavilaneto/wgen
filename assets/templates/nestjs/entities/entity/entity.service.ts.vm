import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { ${entity.getName()} } from './${entity.getSnakeCaseName()}.entity';
import { ${entity.getName()}Mapper } from './dto/${entity.getSnakeCaseName()}-mapper';
import { Create${entity.getName()}Dto } from './dto/create-${entity.getSnakeCaseName()}.dto';
import { Update${entity.getName()}Dto } from './dto/update-${entity.getSnakeCaseName()}.dto';
import { Find${entity.getName()}Dto } from './dto/find-${entity.getSnakeCaseName()}.dto';


@Injectable()
export class ${entity.getName()}Service {
  constructor(
    @InjectRepository(${entity.getName()})
    private readonly repository: Repository<${entity.getName()}>,
  ) {}

  async create(create${entity.getName()}Dto: Create${entity.getName()}Dto) {
    const entity = ${entity.getName()}Mapper.fromCreateDto(create${entity.getName()}Dto);
    return await this.repository.save(entity);
  }

  async findAll() {
    const result = await this.repository.find();
    return result.map((e) => ${entity.getName()}Mapper.toFindDto(e));
  }

  async findOne(id: number) {
    return await this.repository.findOneBy({ id: id });
  }

  update(id: number, update${entity.getName()}Dto: Update${entity.getName()}Dto) {
    return `This action updates a #${id} ${entity.getSnakeCaseName()}`;
  }

  remove(id: number) {
    return `This action removes a #${id} ${entity.getSnakeCaseName()}`;
  }
}
