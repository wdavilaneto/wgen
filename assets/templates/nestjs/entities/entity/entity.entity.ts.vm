import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  ManyToOne,
  OneToMany,
} from 'typeorm';
import { ColumnCommonOptions } from 'typeorm/decorator/options/ColumnCommonOptions';
#foreach ( ${property} in ${entity.getDistinctedAllComplexProperties()} )
import { ${property.getType()} } from '../${property.getSnakeCaseType()}/${property.getSnakeCaseType()}.entity';#end

@Entity({ name: '${entity.getName()}' })
export class ${entity.getName()} {
  @PrimaryGeneratedColumn({ name: '${entity.table.getPk()[0].name}' })
  public id: any;
#foreach( ${property} in ${entity.getProperties()})
  @Column({
    name: '${property.getColumn().getName()}',
    type: '${property.getColumn().getType()}',#if(!${property.isNullable()})
    nullable: false,#else
    nullable: true,#end
  } as ColumnCommonOptions)
  public ${property.getName()}: ${property.getType()};#end
#foreach( ${property} in ${entity.parent.getProperties()})
  public ${property.getName()}: ${property.getType()};#end
#foreach( ${property} in ${entity.id.getProperties()})
  public id_${property.getName()}: ${property.getType()};#end
#foreach( ${property} in ${entity.getManyToOneProperties()})
  @OneToMany(() => ${property.getType()}, (otherEntity: ${property.getType()}) => otherEntity.${property.mappedBy})
  public $property.getName(): ${property.getType()};#end
#foreach( ${property} in ${entity.getOneToManyProperties()})
  @ManyToOne(
    () => ${property.getType()},
    (${property.referedEntity.getBeanPattern()}: ${property.getType()}) => ${property.referedEntity.getBeanPattern()}.${property.mappedBy},
  )
  public $property.getName(): ${property.getType()}[] = [];#end
#foreach( ${property} in ${entity.getManyToManyProperties()})
  public ${property.getName()}: ${property.getReferedEntity().getType()}[] = [];#end
}
