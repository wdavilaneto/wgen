<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="oracle-table-mapper">

    <resultMap id="tableResultMap" type="org.wdn.guick.model.Table">
        <id property="name" column="table_name"/>
        <id property="owner" column="owner"/>
        <result property="comment" column="table_comments"/>
        <collection property="columns" resultMap="columnResultMap"  />
    </resultMap>

    <resultMap id="columnResultMap" type="org.wdn.guick.model.Column">
        <id property="name" column="column_name"/>
        <id property="table.name" column="table_name"/>
        <id property="table.owner" column="owner"/>
        <result property="comment" column="column_comments"/>
        <result property="length" column="data_length"/>
        <result property="nullable" column="nullable"/>
        <result property="position" column="position"/>
        <result property="precision" column="data_precision"/>
        <result property="scale" column="data_scale"/>
        <result property="type" column="data_type"/>
    </resultMap>

    <select id="findTableAndColumns" resultMap="tableResultMap" parameterType="string">
        select
        tab.owner,
        tab.table_name,
        cols.column_name ,
        cols.data_type,
        cols.data_length,
        cols.data_precision,
        cols.data_scale,
        case cols.nullable when 'Y' then 1 else 0 end as nullable ,
        cols.column_id,
        cc.position,
        tcom.comments as table_comments,
        ccom.comments as column_comments
        from ALL_TABLES tab
        left join ALL_constraints cons
        on tab.owner = cons.owner
        and tab.table_name = cons.table_name
        and cons.constraint_type = 'P'
        inner join ALL_tab_columns cols
        on tab.owner = cols.owner
        and tab.table_name = cols.table_name
        left join ALL_cons_columns cc
        on cons.owner = cc.owner
        and cons.table_name = cc.table_name
        and cons.constraint_name = cc.constraint_name
        and cols.column_name = cc.column_name
        left join ALL_tab_comments tcom
        on cols.owner = tcom.owner
        and cols.table_name = tcom.table_name
        left join ALL_col_comments ccom
        on cols.owner = ccom.owner
        and cols.table_name = ccom.table_name
        and cols.column_name = ccom.column_name
        where   (tab.table_name not like 'VW_%')
            and (tab.table_name not like 'BIN$%')
            and (tab.table_name not like 'AD$%')
            AND cols.owner = upper(#{owner})   
        </foreach>
        order by cols.table_name, cc.position, cols.column_id
    </select>


    <!-- select * from DBA_DEPENDENCIES dep where dep.name LIKE upper('xxx')-->

    <select id="findConstraints" resultMap="constraintResultMap">
        select
        k.constraint_name,
        k.table_name, c.column_name, k.constraint_type ,
        r.table_name as R_TABLE_NAME, cr.column_name r_column_name,
        extractvalue (dbms_xmlgen.getxmltype ( 'select search_condition from user_constraints where table_name =''' || k.table_name || ''' and constraint_name = ''' || k.constraint_name || ''''),  '//text()') as SEARCH_CONDITION
        from ALL_constraints k
        left join ALL_constraints r on k.r_owner = r.owner and k.r_constraint_name = r.constraint_name
        inner join ALL_cons_columns c on k.owner = c.owner and k.constraint_name = c.constraint_name and c.table_name = k.table_name
        left join ALL_cons_columns cr on r.owner = cr.owner and r.constraint_name = cr.constraint_name and r.table_name = cr.table_name
        and c.position = cr.position
        where   (k.table_name not like 'AD$%' and k.table_name NOT LIKE 'BIN$%')
            and k.constraint_type not in ( 'P' ) and
        <foreach item="table" collection="tablenames" open="(" separator=" OR " close=")">
            (   k.owner = upper(#{owner})
                <if test="table != null and table != ''"> AND k.table_name = UPPER(#{table}) </if>
            )
        </foreach>
        order by k.table_name, r.table_name , c.position
    </select>

    <select id="count" resultType="long">
        SELECT COUNT(*) * 100 FROM ${owner}.${table} SAMPLE (1)
    </select>

</mapper>